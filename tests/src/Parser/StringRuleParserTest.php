<?php
namespace OW\Rules\Parser;

use Mockery as m;
use OW\Rules\Rule\BasicRule;
use OW\Rules\Filter\Post\HtmlPostFilter;
use OW\Rules\Filter\Post\AttributePostFilter;
use OW\Rules\Filter\Pre\ModifyPreFilter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 17:16:49.
 */
class StringRuleParserTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     * @var StringRuleParser
     */
    protected $object;

    protected $testRules = [
        'css://myname::modify@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(<a><script>)',
        'css://myname@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(<a><script>)',
        'css://myname::modify@:.class1>class2,class3[with=param]',
        'css://::modify@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(<a><script>)',
        'css://myname@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(<a><script>)',
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StringRuleParser();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    /**
     * @covers OW\Rules\Parser\StringRuleParser::serialize
     */
    public function testSerialize()
    {
        $type = 'css';
        $name = 'name';
        $definition = 'definition';
        $attribute = 'attribute';
        
        $preFilters = [];
        
        $postFilters = [
            new AttributePostFilter('href')
        ];
        
        $rule = new BasicRule($name, $definition, $type, $attribute);
        $rule->setPreFilters($preFilters);
        $rule->setPostFilters($postFilters);
        $result = $this->object->serialize($rule);
        $this->assertEquals($type . StringRuleParser::$TYPE_SEPARATOR . $name . StringRuleParser::$PRE_DEFINITION_SEPERATOR . $definition . StringRuleParser::$POST_DEFINITION_SEPERATOR . 'attr(href)', $result);
        
        // try quess default type
        $rule = new BasicRule($name, $definition);
        $rule->setPreFilters($preFilters);
        $rule->setPostFilters($postFilters);
        $result = $this->object->serialize($rule);
        $this->assertEquals($type . StringRuleParser::$TYPE_SEPARATOR . $name . StringRuleParser::$PRE_DEFINITION_SEPERATOR . $definition . StringRuleParser::$POST_DEFINITION_SEPERATOR . 'attr(href)', $result);
        
    }

    /**
     * @covers OW\Rules\Parser\StringRuleParser::parse
     *
     */
    public function testParse()
    {
        $type = 'css';
        $name = 'name';
        $definition = 'definition';
        $preFilters = 'modify';
        $postFilters = 'attr(href)|text';
        
        $rule = $this->object->parse($type . StringRuleParser::$TYPE_SEPARATOR . $name . StringRuleParser::$NAME_SEPARATOR . $preFilters . StringRuleParser::$PRE_DEFINITION_SEPERATOR . $definition . StringRuleParser::$POST_DEFINITION_SEPERATOR . $postFilters);
        $this->assertInstanceOf('OW\Rules\Rule\Rule', $rule);
        $this->assertEquals($type, $rule->getType());
        $this->assertEquals($name, $rule->getName());
        $this->assertEquals($definition, $rule->getDefinition());
        // pre filters
        $this->assertNotEmpty($rule->getPreFilters());
        $this->assertInstanceOf('OW\Rules\Filter\Pre\ModifyPreFilter', $rule->getPreFilters()[0]);
        // post filters
        $this->assertNotEmpty($rule->getPostFilters());
        $this->assertInstanceOf('OW\Rules\Filter\Post\AttributePostFilter', $rule->getPostFilters()[0]);
        $this->assertInstanceOf('OW\Rules\Filter\Post\TextPostFilter', $rule->getPostFilters()[1]);
    }
    

    public function testParser()
    {
        foreach ($this->testRules as $rule) {
            var_dump($this->object->parse($rule));
            $this->assertEquals($rule, $this->object->serialize($this->object->parse($rule)));
        }
    }
}

<?php
namespace OW\Rules\Parser;

use Mockery as m;
use OW\Rules\Rule\BasicRule;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 17:16:49.
 */
class StringRuleParserTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     * @var StringRuleParser
     */
    protected $object;
    
    protected $testRules = [
      'css://myname::pre_filter1|pre_filter2(param1)@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(a,script)',
      'css://myname@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(a,script)',
      'css://myname::pre_filter1|pre_filter2(param1)@:.class1>class2,class3[with=param]',
      'css://pre_filter1|pre_filter2(param1)@:.class1>class2,class3[with=param]:@attr(info)|strip_tags(a,script)',
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StringRuleParser();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    /**
     * @covers OW\Rules\Parser\StringRuleParser::serialize
     * 
     */
    public function testSerialize()
    {
        $type = 'css';
        $name = 'name';
        $definition = 'definition';
        $attribute = 'attribute';
        
        $rule = new BasicRule($name, $definition, $type, $attribute);
        $result = $this->object->serialize($rule);
        $this->assertEquals($type . StringRuleParser::$TYPE_SEPARATOR . $name . StringRuleParser::$PRE_DEFINITION_SEPERATOR . $definition, $result);
    }

    /**
     * @covers OW\Rules\Parser\StringRuleParser::parse
     * 
     * @todo Implement testParse().
     */
    public function testParse()
    {
        $rule = $this->object->parse('css://');
        $this->assertInstanceOf('OW\Rules\Rule\Rule', $rule);
        $this->assertEquals('css', $rule->getType());
    }
    
    public function testParser() 
    {
        foreach ($this->testRules as $rule) {
            $this->assertEquals($rule, $this->object->serialize($this->object->parse($rule)));
        }
    }
    
}
